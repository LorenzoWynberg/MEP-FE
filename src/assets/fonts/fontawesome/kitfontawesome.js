window.FontAwesomeKitConfig = { asyncLoading: { enabled: true }, autoA11y: { enabled: true }, baseUrl: 'https://kit-free.fontawesome.com', detectConflictsUntil: null, license: 'free', method: 'css', minify: { enabled: true }, v4FontFaceShim: { enabled: true }, v4shim: { enabled: true }, version: 'latest' }
!(function () { function r (e) { let t; const n = []; const i = document; const o = i.documentElement.doScroll; const r = 'DOMContentLoaded'; let a = (o ? /^loaded|^c/ : /^loaded|^i|^c/).test(i.readyState); a || i.addEventListener(r, t = function () { for (i.removeEventListener(r, t), a = 1; t = n.shift();)t() }), a ? setTimeout(e, 0) : n.push(e) } !(function () { if (!(void 0 === window.Element || 'classList' in document.documentElement)) { let e; let t; let n; const i = Array.prototype; var o = i.push; const r = i.splice; const a = i.join; d.prototype = { add: function (e) { this.contains(e) || (o.call(this, e), this.el.className = this.toString()) }, contains: function (e) { return this.el.className.indexOf(e) != -1 }, item: function (e) { return this[e] || null }, remove: function (e) { if (this.contains(e)) { for (var t = 0; t < this.length && this[t] != e; t++); r.call(this, t, 1), this.el.className = this.toString() } }, toString: function () { return a.call(this, ' ') }, toggle: function (e) { return this.contains(e) ? this.remove(e) : this.add(e), this.contains(e) } }, window.DOMTokenList = d, e = Element.prototype, t = 'classList', n = function () { return new d(this) }, Object.defineProperty ? Object.defineProperty(e, t, { get: n }) : e.__defineGetter__(t, n) } function d (e) { for (let t = (this.el = e).className.replace(/^\s+|\s+$/g, '').split(/\s+/), n = 0; n < t.length; n++)o.call(this, t[n]) } }()); function a (e) { let t, n, i, o; prefixesArray = e || ['fa'], prefixesSelectorString = '.' + Array.prototype.join.call(e, ',.'), t = document.querySelectorAll(prefixesSelectorString), Array.prototype.forEach.call(t, function (e) { n = e.getAttribute('title'), e.setAttribute('aria-hidden', 'true'), i = !e.nextElementSibling || !e.nextElementSibling.classList.contains('sr-only'), n && i && ((o = document.createElement('span')).innerHTML = n, o.classList.add('sr-only'), e.parentNode.insertBefore(o, e.nextSibling)) }) } const d = function (e, t) { const n = document.createElement('link'); n.href = e, n.media = 'all', n.rel = 'stylesheet', n.id = 'font-awesome-5-kit-css', t && t.detectingConflicts && t.detectionIgnoreAttr && n.setAttributeNode(document.createAttribute(t.detectionIgnoreAttr)), document.getElementsByTagName('head')[0].appendChild(n) }; const c = function (e, t) { !(function (e, t) { let n; const i = t && t.before || void 0; const o = t && t.media || void 0; const r = window.document; const a = r.createElement('link'); if (t && t.detectingConflicts && t.detectionIgnoreAttr && a.setAttributeNode(document.createAttribute(t.detectionIgnoreAttr)), i) n = i; else { const d = (r.body || r.getElementsByTagName('head')[0]).childNodes; n = d[d.length - 1] } const c = r.styleSheets; a.rel = 'stylesheet', a.href = e, a.media = 'only x', (function e (t) { if (r.body) return t(); setTimeout(function () { e(t) }) }(function () { n.parentNode.insertBefore(a, i ? n : n.nextSibling) })); const s = function (e) { for (let t = a.href, n = c.length; n--;) if (c[n].href === t) return e(); setTimeout(function () { s(e) }) }; function l () { a.addEventListener && a.removeEventListener('load', l), a.media = o || 'all' } a.addEventListener && a.addEventListener('load', l), (a.onloadcssdefined = s)(l) }(e, t)) }; const e = function (e, t, n) { const i = t && void 0 !== t.autoFetchSvg ? t.autoFetchSvg : void 0; const o = t && void 0 !== t.async ? t.async : void 0; const r = t && void 0 !== t.autoA11y ? t.autoA11y : void 0; const a = document.createElement('script'); const d = document.scripts[0]; a.src = e, void 0 !== r && a.setAttribute('data-auto-a11y', r ? 'true' : 'false'), i && (a.setAttributeNode(document.createAttribute('data-auto-fetch-svg')), a.setAttribute('data-fetch-svg-from', t.fetchSvgFrom)), o && a.setAttributeNode(document.createAttribute('defer')), n && n.detectingConflicts && n.detectionIgnoreAttr && a.setAttributeNode(document.createAttribute(n.detectionIgnoreAttr)), d.parentNode.appendChild(a) }; function s (e, t) { const n = t && t.addOn || ''; const i = t && t.baseFilename || e.license + n; const o = t && t.minify ? '.min' : ''; const r = t && t.fileSuffix || e.method; const a = t && t.subdir || e.method; return e.baseUrl + '/releases/' + (e.version === 'latest' ? 'latest' : 'v'.concat(e.version)) + '/' + a + '/' + i + o + '.' + r } let t, n, i, o, l; try { if (window.FontAwesomeKitConfig) { let u; const f = window.FontAwesomeKitConfig; const m = { detectingConflicts: f.detectConflictsUntil && new Date() <= new Date(f.detectConflictsUntil), detectionIgnoreAttr: 'data-fa-detection-ignore', detectionTimeoutAttr: 'data-fa-detection-timeout', detectionTimeout: null }; f.method === 'js' && (o = m, l = { async: (i = f).asyncLoading.enabled, autoA11y: i.autoA11y.enabled }, i.license === 'pro' && (l.autoFetchSvg = !0, l.fetchSvgFrom = i.baseUrl + '/releases/' + (i.version === 'latest' ? 'latest' : 'v'.concat(i.version)) + '/svgs'), i.v4shim.enabled && e(s(i, { addOn: '-v4-shims', minify: i.minify.enabled })), e(s(i, { minify: i.minify.enabled }), l, o)), f.method === 'css' && (function (e, t) { let n; const i = a.bind(a, ['fa', 'fab', 'fas', 'far', 'fal', 'fad']); e.autoA11y.enabled && (r(i), n = i, typeof MutationObserver !== 'undefined' && new MutationObserver(n).observe(document, { childList: !0, subtree: !0 })), e.v4shim.enabled && (e.license, e.asyncLoading.enabled ? c(s(e, { addOn: '-v4-shims', minify: e.minify.enabled }), t) : d(s(e, { addOn: '-v4-shims', minify: e.minify.enabled }), t)); e.v4FontFaceShim.enabled && (e.asyncLoading.enabled ? c(s(e, { addOn: '-v4-font-face', minify: e.minify.enabled }), t) : d(s(e, { addOn: '-v4-font-face', minify: e.minify.enabled }), t)); const o = s(e, { minify: e.minify.enabled }); e.asyncLoading.enabled ? c(o, t) : d(o, t) }(f, m)), m.detectingConflicts && ((u = document.currentScript.getAttribute(m.detectionTimeoutAttr)) && (m.detectionTimeout = u), document.currentScript.setAttributeNode(document.createAttribute(m.detectionIgnoreAttr)), t = f, n = m, r(function () { const e = document.createElement('script'); n && n.detectionIgnoreAttr && e.setAttributeNode(document.createAttribute(n.detectionIgnoreAttr)), n && n.detectionTimeoutAttr && n.detectionTimeout && e.setAttribute(n.detectionTimeoutAttr, n.detectionTimeout), e.src = s(t, { baseFilename: 'conflict-detection', fileSuffix: 'js', subdir: 'js', minify: t.minify.enabled }), e.async = !0, document.body.appendChild(e) })) } } catch (e) { } }())
